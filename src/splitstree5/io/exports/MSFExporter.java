package splitstree5.io.exports;

import splitstree5.core.datablocks.CharactersBlock;
import splitstree5.core.datablocks.TaxaBlock;
import splitstree5.core.datablocks.characters.CharactersType;
import splitstree5.io.exports.interfaces.IExportCharacters;

import java.io.IOException;
import java.io.Writer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class MSFExporter implements IExportCharacters {

    private int optionLineLength = 40;

    @Override
    public void export(Writer w, TaxaBlock taxa, CharactersBlock characters) throws IOException {

        int ntax = taxa.getNtax();
        int nchar = characters.getNchar();

        // data type
        if (characters.getDataType().equals(CharactersType.Protein))
            w.write("!!AA_MULTIPLE_ALIGNMENT 1.0"+"\n");
        else
            w.write("!!NA_MULTIPLE_ALIGNMENT 1.0"+"\n");

        // info
        w.write("\n"+"Generated by SplitsTree5 ");
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        w.write(dateFormat.format(date)+" ..\n\n");

        // taxa
        for (int i = 1; i <= ntax; i++){
            // random number from 1000 to 9999
            int randomNum = ThreadLocalRandom.current().nextInt(1000, 9999 + 1);

            w.write("Name: " + taxa.get(i) +
                    " Len: " + nchar +
                    " Check: " + randomNum +
                    " Weight: 1.0" + "\n");
        }

        w.write("\n//\n\n");

        int iterations = nchar / optionLineLength + 1;
        int stopIndex = optionLineLength;

        for (int i = 1; i <= iterations; i++) {
            int startIndex = optionLineLength * (i - 1) + 1;
            w.write(startIndex+" "+stopIndex+"\n");
            for (int t = 1; t <= ntax; t++) {
                StringBuilder sequence = new StringBuilder("");
                for (int j = startIndex; j <= optionLineLength * i && j <= nchar; j++) {
                    sequence.append(characters.get(t, j));
                }
                w.write(taxa.get(t) + " \t" + sequence.toString().toUpperCase()+"\n");
            }

            stopIndex += optionLineLength;
            if (stopIndex > nchar)
                stopIndex = nchar;

            w.write("\n");
        }
    }

    @Override
    public List<String> getExtensions() {
        return Arrays.asList("msf");
    }

    public int getOptionLineLength() {
        return this.optionLineLength;
    }

    public void setOptionLineLength(int lineLength) {
        this.optionLineLength = lineLength;
    }
}
